{"version":3,"sources":["Header.js","OcularEngine.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","textAlign","paddingBottom","fontFamily","fontWeight","fontSize","color","float","subtitle","Header","style","role","OcularEngine","buttonStyle","id","neuButton","onClick","window","location","reload","imgStyle","imgResize","src","Component","marginBottom","borderRadius","position","textDecoration","padding","letterSpacing","boxShadow","maxWidth","height","border","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAWA,IAAMA,EAAc,CAChBC,UAAW,SACXC,cAAe,MACfC,WAAY,YACZC,WAAY,MACZC,SAAU,OACVC,MAAO,OACPC,MAAO,UAGLC,EAAW,CACbP,UAAW,SACXE,WAAY,YACZE,SAAU,OACVC,MAAO,QAGIG,EA1Bf,WACI,OACI,6BACI,wBAAIC,MAAOV,GAAa,0BAAMW,KAAK,OAAX,iBAAxB,oBAAoE,0BAAMA,KAAK,OAAX,kBACpE,uBAAGD,MAAOF,GAAV,4B,4BCJNI,E,uKAGE,OACI,6BACI,yBAAKF,MAAOG,GACZ,4BAAQC,GAAG,SAASJ,MAAOK,EAAWC,QAAS,kBAAMC,OAAOC,SAASC,QAAO,KAA5E,aAEA,yBAAKT,MAAOU,GACZ,yBAAKN,GAAG,MAAMJ,MAAOW,EAAWC,IAAK,8D,GAT1BC,aAgBrBV,EAAc,CAChBW,aAAc,OACdvB,UAAW,SACXwB,aAAc,QAGZV,EAAY,CACdW,SAAU,WACVC,eAAgB,OAChBC,QAAS,YACTxB,WAAY,MACZE,MAAO,OACPuB,cAAe,MACfJ,aAAc,OACdK,UAAW,qCAGTV,EAAW,CACbb,MAAO,SACPN,UAAW,UAGToB,EAAY,CACdU,SAAU,MACVC,OAAQ,OACRC,OAAQ,qBACRR,aAAc,MAGHb,IClCAsB,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99b55a1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header () {\r\n    return(\r\n        <div>\r\n            <h1 style={headerStyle}><span role=\"img\">ðŸ’Ž </span>The Ocular Engine<span role=\"img\"> ðŸ’Ž</span></h1>\r\n            <p style={subtitle}>4K Wallpaper Generator</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    textAlign: \"center\",\r\n    paddingBottom: '2px',\r\n    fontFamily: 'Helvetica',\r\n    fontWeight: '600',\r\n    fontSize: '48px',\r\n    color: '#000',\r\n    float: 'center'\r\n}\r\n\r\nconst subtitle = {\r\n    textAlign: 'center', \r\n    fontFamily: 'Helvetica', \r\n    fontSize: '18px',\r\n    color: '#000',\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass OcularEngine extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div style={buttonStyle}>\r\n                <button id=\"button\" style={neuButton} onClick={() => window.location.reload(false)}>GENERATE</button>\r\n                </div>\r\n                <div style={imgStyle}>\r\n                <img id=\"img\" style={imgResize} src={\"https://source.unsplash.com/1600x900/?wallpaper, hd\"}></img>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst buttonStyle = {\r\n    marginBottom: '20px',\r\n    textAlign: \"center\",\r\n    borderRadius: '40px'\r\n}\r\n\r\nconst neuButton = {\r\n    position: 'relative',\r\n    textDecoration: 'none',\r\n    padding: '10px 30px',\r\n    fontWeight: '500',\r\n    color: '#000',\r\n    letterSpacing: '2px',\r\n    borderRadius: '40px',\r\n    boxShadow: '-2px -2px 8px rgba(255,255,255,1)',\r\n}\r\n\r\nconst imgStyle = {\r\n    float: 'center',\r\n    textAlign: 'center',\r\n}\r\n\r\nconst imgResize = {\r\n    maxWidth: '60%',\r\n    height: 'auto',\r\n    border: '10px solid #000d03',\r\n    borderRadius: '1%'\r\n}\r\n\r\nexport default OcularEngine;","import React from 'react';\nimport Header from './Header';\nimport OcularEngine from './OcularEngine';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <OcularEngine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}